{
    "contents" : "rankAll <- function() {\n  functions <- c( \"ackley\", \"alpine\", \"elliptic\", \"eggholder\", \n                  \"goldsteinprice\", \"griewank\", \"levy\", \"michalewicz\", \n                  \"quadric\", \"quartic\", \"rastrigin\", \"rosenbrock\", \n                  \"salomon\", \"schwefel1_2\", \"schwefel2_22\", \"schwefel2_26\", \n                  \"sixhump\", \"spherical\", \"step\", \"zakharov\");\n  \n\n   algorithms <- c(\"gbest\", \"lbest\", \"vn\", \"spso\", \"gcstar\", \"gcring\", \"gcvn\", \"bb\", \"bbe\");\n\n   a1 <- 1;\n   count <- 1;\n   algcount <- 1;\n\n   result.df <- data.frame ( a1=rep(\"\", length(functions)),\n                             a2=rep(\"\", length(functions)),\n                             a3=rep(\"\", length(functions)),\n                             a4=rep(\"\", length(functions)),\n                             a5=rep(\"\", length(functions)),\n                             a6=rep(\"\", length(functions)),\n                             a7=rep(\"\", length(functions)),\n                             a8=rep(\"\", length(functions)),\n                             a9=rep(\"\", length(functions)),\n                             a10=rep(\"\", length(functions)),\n                             a11=rep(\"\", length(functions)),\n                             a12=rep(\"\", length(functions)),\n                             a13=rep(\"\", length(functions)),\n                             a14=rep(\"\", length(functions)),\n                             a15=rep(\"\", length(functions)),\n                             a16=rep(\"\", length(functions)),\n                             a17=rep(\"\", length(functions)),\n                             a18=rep(\"\", length(functions)),\n                             a19=rep(\"\", length(functions)),\n                             a20=rep(\"\", length(functions)),\n                             a21=rep(\"\", length(functions)),\n                             a22=rep(\"\", length(functions)),\n                             a23=rep(\"\", length(functions)),\n                             a24=rep(\"\", length(functions)),\n                             a25=rep(\"\", length(functions)),\n                             a26=rep(\"\", length(functions)),\n                             a27=rep(\"\", length(functions)),\n                             a28=rep(\"\", length(functions)),\n                             a29=rep(\"\", length(functions)),\n                             a30=rep(\"\", length(functions)),\n                             a31=rep(\"\", length(functions)),\n                             a32=rep(\"\", length(functions)),\n                             a33=rep(\"\", length(functions)),\n                             a34=rep(\"\", length(functions)),\n                             a35=rep(\"\", length(functions)),\n                             a36=rep(\"\", length(functions)),\n                             \n                             stringsAsFactors=FALSE);\n   result.function <- c();\n\n   for (f in 1:length(functions)) {\n      result.function <- c();\n      rownames(result.df)[f] <- functions[f];\n      algcount <- 1;\n      for (a1 in 1:(length(algorithms)-1)) {\n         for (a2 in (a1+1):length(algorithms)) {\n            print(paste(count, \" doing \", algorithms[a1], \".\", algorithms[a2], \".\", functions[f], \".txt\", sep=\"\"));\n            count <- count + 1;\n            rankList <- rank(paste(\"./mwu/\",\n                        algorithms[a1],\n                        \".\",\n                        algorithms[a2],\n                        \".\",\n                        functions[f],\n                        \".txt\",\n                        sep=\"\"\n                     ));\n\n            colnames(result.df)[algcount] <- paste(algorithms[a1], algorithms[a2], sep=\".\");\n            algcount <- algcount +1;\n            result.function <- c(result.function, unlist(unname(rankList[2])))\n         }\n      }\n      result.df[f,] <- result.function;\n   }\n   write.table(   result.df,\n                  \"mwu-results.txt\",\n                  row.names=TRUE,\n                  col.names=TRUE,\n                  quote=FALSE,\n                  sep=\" \"\n               );\n}\n\n\nrank <- function(source) {\n   x <- scan(source, what=list(perf=0,alg=\"\"))\n   data <- c(x$perf)\n   data \n   group <- factor(x$alg)\n   group\n   rankList <- rankF(data,group,0.05,FALSE)\n   return (rankList)\n}\n\nrankF <- function(data, group, alpha=0.05, max=TRUE) {\n   #initializes the ranks to 0\n   algorithms <- unique(group)\n   rankList <- list()\n   for (algorithm in algorithms) {\n      rankList[(algorithm)] <- 0\n   }\n\n   #calculate the vector of medians for all the algorithms' measures\n   medians <- tapply(data, group, median)\n\n   #perform a Kruskal-Wallis test to assess if there are differences among all the results\n   dataframe <- data.frame(group, data)\n   kruskal <- kruskal.test(data ~ group, data=dataframe)\n   if (!is.na(kruskal$p.value) && kruskal$p.value < alpha) {\n      #post-hoc test: perform a pairwise Mann-Whitney-Wilcoxon rank sum test\n      #with Hol correction to assess individual differences\n      wilcoxon <- pairwise.wilcox.test(data, group, p.adj=\"holm\", exact=FALSE)\n\n      for (algorithm1 in rownames(wilcoxon$p.value)) {\n         for (algorithm2 in colnames(wilcoxon$p.value)) {\n            if (!is.na(wilcoxon$p.value[algorithm1,algorithm2]) &&\n                wilcoxon$p.value[algorithm1,algorithm2] < alpha) {\n               #there is a significant difference between algorithm1 and algorithm2\n               #we need to identify which one is the best and which one the worst\n               #we'll use the median for that purpose, since it is coherent with the\n               #use of the MWW method, which also uses medians\n               if (medians[algorithm1] > medians[algorithm2]) {\n                  best <- algorithm1\n                  worst <- algorithm2\n               }\n               else {\n                  best <- algorithm2\n                  worst <- algorithm1\n               }\n\n               #if max==FALSE, swap best and worst\n               if (!max) {\n                  tmp <- best\n                  best <- worst\n                  worst <- tmp\n               }\n\n               #update ranks\n               rankList[[best]] <- rankList[[best]] + 1\n               rankList[[worst]] <- rankList[[worst]] -1\n            }\n         }\n      }\n   }\n   return (rankList)\n}\n \n\n",
    "created" : 1397647369616.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2437397290",
    "id" : "4DD3B576",
    "lastKnownWriteTime" : 1393921030,
    "path" : "~/research/rscripts/ranks.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}